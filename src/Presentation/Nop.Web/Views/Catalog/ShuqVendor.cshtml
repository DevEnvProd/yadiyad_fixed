@model VendorModel
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-vendor-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var vendorUrl = Url.RouteUrl("Vendor", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(vendorUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }
}
<!--vendor breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_VendorBreadcrumb", Model.Breadcrumb)
}
<style type="text/css">
    .ratio-1-1 {
        position: relative;
        padding-top: 100%;
        width: 100%;
        height: 0;
        overflow: hidden;
    }

    .ratio-100-110 {
        position: relative;
        padding-top: 110%;
        width: 100%;
        height: 0;
        overflow: hidden;
    }

    .picture-frame {
        border: 1px solid transparent;
        border-radius: 5px;
        padding: 0;
    }

    .product-grid-4 .item-box {
        width: 24%;
    }

        .product-grid-4 .item-box:nth-child(3n+1) {
            clear: none !important;
        }

        .product-grid-4 .item-box:nth-child(4n+1) {
            clear: both;
        }

    .product-grid {
        margin-top: 10px;
    }
</style>

<div class="page vendor-page">
    <div class="page-body">
        @*vendor info*@

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.VendorDetailsTop, additionalData = Model })


        <div class="row">
            @if (Model.PictureModel != null && Model.PictureModel.ImageUrl != null)
            {
                <div class="col-lg-12 col-xl-2 text-center picture-frame">
                    <div class="ratio-1-1" style="background-image: url('@Model.PictureModel.ImageUrl');background-size:contain;background-repeat:no-repeat;background-position:center;">
                        @*<img class="product-merchant-logo" src="@Model.PictureModel.ImageUrl">*@
                    </div>
                </div>
            }

            <div class="col-lg-12 col-xl-10">
                <h2 class="text-bold overflow-vendor">@Model.Name</h2>
                <div class="row">
                    <div class="col-lg-12 col-xl-6">
                        <div class="d-flex">
                            <div>Rating: </div>
                            <div class="mr-2 ml-2">@(Model.VendorReviewOverview.RatingSum / (Model.VendorReviewOverview.TotalReviews > 0 ? Model.VendorReviewOverview.TotalReviews : 1))</div>
                            <div class="product-review-box pt-1">
                                <div class="rating">
                                    <div style="width: @(Model.VendorReviewOverview.RatingSum / (Model.VendorReviewOverview.TotalReviews >0 ? Model.VendorReviewOverview.TotalReviews : 1) * 100 / 5)%">
                                    </div>
                                </div>
                            </div>
                            <div style="color:black">(@Model.VendorReviewOverview.TotalReviews Reviews)</div>
                        </div>
                        <div class="d-flex">
                            <div>Joined: </div>
                            <div class="mr-2 ml-2">@Model.JoinedDate.ToShortDateString()</div>
                        </div>
                    </div>
                    <div class="col-lg-12 col-xl-6">
                        <div class="d-flex">
                            <div>Category: </div>
                            <div class="mr-2 ml-2">@Model.CategoryName</div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <hr>

        @if (!string.IsNullOrEmpty(Model.Description))
        {
            <div class="row">
                <div class="col-lg-12">
                    <h4 class="d-inline-block">Shop Description</h4>
                    <div>@Html.Raw(Model.Description)</div>
                </div>
            </div>
        }
        <hr>
        @if (!string.IsNullOrEmpty(Model.AboutUs))
        {
            <div class="row">
                @if (Model.AboutUsPictureModel != null)
                {
                    <div class="col-lg-12 col-xl-3 text-center picture-frame">
                        <div class="ratio-100-110" style="background-image: url('@Model.AboutUsPictureModel.ImageUrl');background-size:cover;">
                            @*<img class="product-merchant-logo" src="@Model.PictureModel.ImageUrl">*@
                        </div>
                    </div>
                }
                <div class="col-lg-12 col-xl-9">
                    <h4 class="d-inline-block">About Us</h4>
                    <div>@Html.Raw(Model.AboutUs)</div>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-lg-12 mt-4">
                <div class="nivo mt-4">
                    @await Component.InvokeAsync("Widget", new
               {
                   widgetZone = PublicWidgetZones.ShuqMartPageTop,
                   additionalData = new
                   {
                       slides = Model.SliderPictureModel.Select(x => new GenericSliderModel
                            {
                           PictureUrl = x.ImageUrl,
                           Description = x.AlternateText
                       }).ToList(),
                       isVerticalView = false
                   }
               })
                </div>
            </div>
        </div>


        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
        }
        @*product list*@
        @if (Model.Products.Count > 0)
        {
            <div class="@(Model.PagingFilteringContext.ViewMode == " list" ? "product-list" : "product-grid" )">
                <div class="item-grid product-grid-4">
                    @foreach (var product in Model.Products)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", product)
                        </div>
                    }
                </div>
            </div>
        }


        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }

        @{
            <div class="card">
                <div class="card-body">
                    <div class="text-center product-detail-title mb-2">Reviews</div>
                    <div class="text-center mb-2">
                        @await Html.PartialAsync("_VendorReviewOverview", Model.VendorReviewOverview)
                    </div>
                    @*<div class="text-center mb-2">
                            <a class="btn btn-outline-primary" href="@Url.RouteUrl("ProductReviews", new { productId = reviewOverview.ProductId })">Write a Review</a>
                        </div>*@
                </div>
                @if (Model.VendorProductReviews.Count() > 0)
                {
                    <div class="product-review-list">
                        @foreach (var review in Model.VendorProductReviews)
                        {
                            var ratingPercent = review.Rating * 20;
                            <div class="product-review-item">
                                <div class="review-item-head">
                                    <div class="review-title">
                                        @review.CustomerName on @review.WrittenOnStr
                                    </div>
                                    <div class="product-review-box">
                                        <div class="rating">
                                            <div style="width: @(ratingPercent)%">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="review-content">
                                    <div class="review-text">
                                        @if (!string.IsNullOrEmpty(review.CustomerAvatarUrl))
                                        {
                                            <div class="avatar">
                                                @if (review.AllowViewingProfiles)
                                                {
                                                    <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })" class="avatar-img-link">
                                                        <img src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar" />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <img src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar" />
                                                }
                                            </div>
                                        }
                                        <div class="text-tertiary text-bold">
                                            @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                                        </div>
                                    </div>
                                    @foreach (var reviewType in review.AdditionalProductReviewList.Where(x => x.Rating > 0 && x.VisibleToAllCustomers))
                                    {
                                        var ratingExtPercent = reviewType.Rating * 20;
                                        <div class="review-type-rating-ext">
                                            <div class="review-title">
                                                <i>@reviewType.Name</i>
                                            </div>
                                            <div class="product-review-box">
                                                <div class="rating">
                                                    <div style="width: @(ratingExtPercent)%">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.VendorDetailsBottom, additionalData = Model })
    </div>
</div>
