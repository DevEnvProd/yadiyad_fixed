@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<style>
    .vendor-online-status{
        color: red;
        font-weight:600;
    }
</style>

<div class="product-item" data-productid="@Model.Id">
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title"
                 onerror="loadDefaultImage(event)" />
        </a>
    </div>
    <div class="details">
        <div class="row">
            <h2 class="product-title col-10">
                <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})"><b>@Model.Name</b></a>
            </h2>
            @if (!Model.VendorOnline || Model.PastSeasonal)
            {
                <h6 class="float-right col-2 vendor-online-status">
                    TNA
                </h6>
            }
            
        </div>
        
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating d-inline-block @(Model.ProductBusinessNature == "Eat"?"eat-rating-1":"mart-rating-1")">
                    <div class="@(Model.ProductBusinessNature == "Eat"?"eat-rating-2":"mart-rating-2")" style="width: @(ratingPercent)%">
                    </div>
                </div>
                <span> </span>
                <span class="@(Model.ProductBusinessNature == "Eat" ?"eat-color":"mart-color")">@((5 * ratingPercent / 100.00).ToString("0.0"))</span>
            </div>
        }

        @if (Model.SpecificationAttributeModels != null && Model.SpecificationAttributeModels.Count > 0)
        {
            var specs = Model.SpecificationAttributeModels
                .Where(x => string.IsNullOrWhiteSpace(x.PictureUrl) == false
                && x.SpecificationAttributeName.Equals("Dietary Description", StringComparison.InvariantCultureIgnoreCase)
                && (x.ValueRaw.ToLower().Contains("muslim")
                || x.ValueRaw.ToLower().Contains("halal")))
                .ToList();

            if (specs.Count > 0)
            {
                <div class="product-spec-box text-right float-right">
                    @foreach (var spec in specs)
                    {
                        <img class="ml-1" style="max-width: 40px; max-height: 40px; " src="@spec.PictureUrl" loading="lazy">
                    }
                </div>
            }
        }
        <div class="description">
            @Html.Raw(Model.ShortDescription)
        </div>
        <div class="add-info">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
            <div class="prices">
      @*          <div>
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                    }
                    else
                    {
                        <span class="price old-price mock">no old price</span>
                    }
                </div>*@
                <div>
                    <span class="price actual-price text-bold @(Model.ProductBusinessNature == "Eat" ?"eat-color":"mart-color")">@Model.ProductPrice.Price</span>
                </div>
                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <span class="tax-shipping-info">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </span>
                }
                @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                {
                    <div class="base-price-pangv text-primary">
                        @Model.ProductPrice.BasePricePAngV
                    </div>
                }
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            @if (!String.IsNullOrWhiteSpace(Model.VendorName))
            {
                <div class="vendor-name">
                    @if (string.IsNullOrWhiteSpace(Model.VendorStateName) == false)
                    {
                        <img class="ico-location product-box-vendor" src="~/img/shuq/home/location-shuq-eats.svg" loading="lazy">@Model.VendorStateName
                    }
                    else
                    {
                        <span class="product-box-vendor">@Model.VendorName</span>
                    }
                </div>
            }
            <div class="buttons">
                <a class="btn btn-primary " href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">Order Now</a>
                @*<input type="button" value="@T("Products.BuyNow")" class="btn btn-primary " onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                @if (!Model.ProductPrice.DisableBuyButton && false)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <input type="button" value="@(addToCartText)" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                }
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
                }
                @if (!Model.ProductPrice.DisableWishlistButton && false)
                {
                    <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                }
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
