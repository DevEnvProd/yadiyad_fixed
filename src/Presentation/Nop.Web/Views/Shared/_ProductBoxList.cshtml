@model IList<ProductOverviewModel>
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax


@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@foreach (var item in Model)
{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (item.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = item.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = item.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = item.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = item.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = item.Id });




    <div class="item-box">

        <div class="product-item" data-productid="@item.Id">
            <div class="picture">
                <a href="@Url.RouteUrl("Product", new { SeName = item.SeName })" title="@item.DefaultPictureModel.Title">
                    <img alt="@item.DefaultPictureModel.AlternateText" src="@item.DefaultPictureModel.ImageUrl" title="@item.DefaultPictureModel.Title"
                        onerror="loadDefaultImage(event)" />
                </a>
            </div>
            <div class="details">
                <h2 class="product-title">
                    <a href="@Url.RouteUrl("Product", new {SeName = item.SeName})"><b>@item.Name</b></a>
                </h2>
                @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(item.Sku))
                {
                    <div class="sku">
                        @item.Sku
                    </div>
                }
                @if (item.ReviewOverviewModel.AllowCustomerReviews)
                {
                    var ratingPercent = 0;
                    if (item.ReviewOverviewModel.TotalReviews != 0)
                    {
                        ratingPercent = ((item.ReviewOverviewModel.RatingSum * 100) / item.ReviewOverviewModel.TotalReviews) / 5;
                    }
                    <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, item.ReviewOverviewModel.TotalReviews)">
                        <div class="rating d-inline-block">
                            <div style="width: @(ratingPercent)%">
                            </div>
                        </div>
                        <span> </span>
                        <span>@((5*ratingPercent/100.00).ToString("0.0"))</span>
                    </div>
                }
                <div class="description">
                    @Html.Raw(item.ShortDescription)
                </div>
                <div class="add-info">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                    <div class="prices">
                 @*       <div>
                            @if (!string.IsNullOrEmpty(item.ProductPrice.OldPrice))
                            {
                                <span class="price old-price ">@item.ProductPrice.OldPrice</span>
                            }
                            else
                            {
                                <span class="price old-price mock">no old price</span>
                            }
                        </div>*@
                        <div>
                            <span class="price actual-price "><b>@item.ProductPrice.Price</b></span>
                        </div>
                        @if (item.ProductPrice.DisplayTaxShippingInfo)
                        {
                            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                            //of course, you can modify appropriate locales to include VAT info there
                            <span class="tax-shipping-info">
                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(item.ProductPrice.BasePricePAngV))
                        {
                            <div class="base-price-pangv ">
                                <b>@item.ProductPrice.BasePricePAngV</b>
                            </div>
                        }
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                    @if (!String.IsNullOrWhiteSpace(item.VendorName))
                    {
                    <div class="vendor-name">
                        @if (string.IsNullOrWhiteSpace(item.VendorStateName) == false)
                        {
                            <img class="ico-location product-box-vendor" src="~/img/shuq/home/location-shuq-eats.svg" loading="lazy">@item.VendorStateName
                        }
                        else
                        {
                            <span class="product-box-vendor">@item.VendorName</span>
                        }
                    </div>
                    }
                    <div class="buttons">
                        <input type="button" value="Order Now" class="btn btn-primary " onclick="setLocation('@Url.RouteUrl("Product", new { SeName = item.SeName })')" />
                        @if (!item.ProductPrice.DisableBuyButton && false)
                        {
                            var addToCartText = T("ShoppingCart.AddToCart").Text;
                            if (item.ProductPrice.IsRental)
                            {
                                addToCartText = T("ShoppingCart.Rent").Text;
                            }
                            if (item.ProductPrice.AvailableForPreOrder)
                            {
                                addToCartText = T("ShoppingCart.PreOrder").Text;
                            }
                            <input type="button" value="@(addToCartText)" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                        }
                        @if (!item.ProductPrice.DisableAddToCompareListButton)
                        {
                            <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
                        }
                        @if (!item.ProductPrice.DisableWishlistButton && false)
                        {
                            <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                        }
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
                </div>
            </div>
        </div>
    </div>
}
