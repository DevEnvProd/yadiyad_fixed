@model DashboardModel
@inject IPermissionService permissionService
@using Nop.Services.Security
@{
    Html.AppendCssFileParts("~/lib/ionicons/css/ionicons-2.0.1.min.css");

    //page title
    ViewBag.PageTitle = T("Admin.Dashboard.Pro").Text;
    Html.SetActiveMenuItemSystemName("Pro Dashboard");

    var canManageOrders = permissionService.Authorize(StandardPermissionProvider.ManageOrders);
    var canManageCustomers = permissionService.Authorize(StandardPermissionProvider.ManageCustomers);
    var canManageProducts = permissionService.Authorize(StandardPermissionProvider.ManageProducts);
    var canManageReturnRequests = permissionService.Authorize(StandardPermissionProvider.ManageReturnRequests);
}

<div class="content-header">
    <h1>
        @T("Admin.Dashboard.Pro")
    </h1>
</div>
<div class="content">
    <div class="row">
        <div class="col-md-12">
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.DashboardProTop })
            @if (!Model.IsLoggedInAsVendor && canManageOrders && canManageCustomers && canManageProducts && canManageReturnRequests)
            {
                <div class="row">
                    <div class="col-md-12">
                        @await Component.InvokeAsync("YadiyadStatistics")
                    </div>
                </div>
            }
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.DashboardProKeyStatisticsAfter })
            @if (!Model.IsLoggedInAsVendor && (canManageOrders || canManageCustomers))
            {
                <div class="row">
                    @if (!Model.IsLoggedInAsVendor && canManageOrders)
                    {
                        <div class="col-md-6">
                            @await Html.PartialAsync("_ProTopJobCVSegments")
                        </div>
                    }
                    @if (!Model.IsLoggedInAsVendor && canManageCustomers)
                    {
                        <div class="col-md-6">
                            @await Html.PartialAsync("_ProTopServiceSegments")
                        </div>
                    }
                </div>
            }
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.DashboardProPieChartsAfter })
            @if (canManageOrders)
            {
                <div class="row">
                    @*<div class="col-md-6">
                    @await Html.PartialAsync("_ActiveIndividuals")
                </div>*@
                    <div class="col-md-12">
                        @await Html.PartialAsync("_ActiveOrganizations")
                    </div>
                </div>
            }
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.DashboardProTopOrganizationsAfter })
            @if (canManageOrders)
            {
                <div class="row">
                    @*<div class="col-md-6">
                    @await Html.PartialAsync("_ActiveIndividuals")
                </div>*@
                    <div class="col-md-12">
                        @await Html.PartialAsync("_ActiveIndividuals")
                    </div>
                </div>
            }
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.DashboardProTopIndividualsAfter })
        </div>
    </div>
</div>
<nop-alert asp-alert-id="loadOrderStatisticsAlert" asp-alert-message="@T("Admin.SalesReport.OrderStatistics.Alert.FailedLoad")" />
<nop-alert asp-alert-id="loadCustomerStatisticsAlert" asp-alert-message="@T("Admin.Reports.Customers.CustomerStatistics.Alert.FailedLoad")" />
