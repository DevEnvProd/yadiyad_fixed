@model ChargeSearchModel

@inject IStoreService storeService
@using Nop.Services.Stores

@{
    //page title
    ViewBag.PageTitle = T("Admin.Charge").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Charge");
}

@{
    const string hideSearchBlockAttributeName = "OrdersPage.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<form asp-controller="Charge" asp-action="List" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            Charge List
        </h1>
        <div class="pull-right">
            <a asp-action="ChargeCreate" class="btn bg-blue">
                <i class="fa fa-plus-square"></i>
                @T("Admin.Common.AddNew")
            </a>
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.NewsListButtons })
        </div>
    </div>
    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                            <div class="search-text">@T("Admin.Common.Search")</div>
                            <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                            <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                        </div>
                        <div class="search-body @(hideSearchBlock ? "closed" : "")">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            Product Type
                                        </div>
                                        <div class="col-md-8">
                                            @*<nop-select asp-for="SearchProductTypeId" asp-items="@Html.GetEnumSelectList<YadiYad.Pro.Core.Domain.Order.ProductType>()"/>*@
                                            <select class="form-control" asp-for="SearchProductTypeId" asp-items="@Html.GetEnumSelectList<YadiYad.Pro.Core.Domain.Order.ProductType>()">
                                                <option value="0">All</option>
                                            </select>
                                        </div>
                                    </div>

                                    @*<div class="form-group">
                                        <div class="col-md-4">
                                            Order Date
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="OrderDate" />
                                        </div>
                                    </div>*@

                                </div>
                                @*<div class="col-md-7">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            Payment Status
                                        </div>
                                        <div class="col-md-8">
                                            <select asp-for="PaymentStatusId" class="form-control" asp-items="@Html.GetEnumSelectList<Nop.Core.Domain.Payments.PaymentStatus>()">
                                                <option value="0">All</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>*@
                            </div>
                            <div class="form-group">
                                <div class="col-md-7 col-md-offset-5">
                                    <button type="button" id="search-charge" class="btn btn-primary btn-search"><i class="fa fa-search"></i>@T("Admin.Common.Search")</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="panel panel-default">
                    <div class="panel-body">
                        @{
                            var gridModel = new DataTablesModel
                            {
                                Name = "orders-grid",
                                UrlRead = new DataUrl("ChargeList", "Charge", null),
                                SearchButtonId = "search-charge",
                                Length = Model.PageSize,
                                LengthMenu = Model.AvailablePageSizes,
                                Filters = new List<FilterParameter>
                                                {
                                    new FilterParameter(nameof(Model.SearchProductTypeId)),


                                }
                            };
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(ChargeModel.ProductTypeName))
                            {
                                Title = "Product Type"

                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(ChargeModel.SubProductTypeName))
                            {
                                Title = "Sub Product Type"
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(ChargeModel.ValidityDays))
                            {
                                Title = "Validity"
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(ChargeModel.ValueTypeName))
                            {
                                Title = "Value Type"
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(ChargeModel.Value))
                            {
                                Title = "Value"
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(ChargeModel.StartDate))
                            {
                                Title = "Effective Start",
                                Render = new RenderDate()
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(ChargeModel.EndDate))
                            {
                                Title = "Effective Until",
                                Render = new RenderDate()
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(ChargeModel.Id))
                            {
                                Title = "Edit",
                                ClassName = NopColumnClassDefaults.Button,
                                Render = new RenderButtonEdit(new DataUrl("ChargeEdit"))
                            });
                        }

                        @await Html.PartialAsync("Table", gridModel)

                        <script>
                            function renderColumnOrderStatus(data, type, row, meta) {
                                var color;
                                switch (row.OrderStatusId) {
                                    case 10:
                                        color = 'yellow';
                                        break;
                                    case 20:
                                        color = 'blue';
                                        break;
                                    case 30:
                                        color = 'green';
                                        break;
                                    case 40:
                                        color = 'red';
                                        break;
                                }
                                return '<span class="grid-report-item ' + color + '">' + data + '</span >';
                            }

                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Order" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#exportXmlSelected-info').text("@T("Admin.Orders.NoOrders")");
                $("#exportXmlSelected").click();
            }
            else {
                $('#export-xml-selected-form #selectedIds').val(ids);
                $('#export-xml-selected-form').submit();
                updateTable('#orders-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportXmlSelected" />

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Order" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#exportExcelSelected-info').text("@T("Admin.Orders.NoOrders")");
                $("#exportExcelSelected").click();
            }
            else {
                $('#export-excel-selected-form #selectedIds').val(ids);
                $('#export-excel-selected-form').submit();
                updateTable('#orders-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportExcelSelected" />

@*Print packaging slips selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Order" asp-action="PdfInvoiceSelected" method="post" id="pdf-invoice-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#pdf-invoice-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#pdfInvoiceSelected-info').text("@T("Admin.Orders.NoOrders")");
                $("#pdfInvoiceSelected").click();
            }
            else {
                $('#pdf-invoice-selected-form #selectedIds').val(ids);
                $('#pdf-invoice-selected-form').submit();
                updateTable('#orders-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="pdfInvoiceSelected" />