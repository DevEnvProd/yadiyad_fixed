@model int?
@inject IDownloadService downloadService

@using Nop.Core;
@using Nop.Services.Media
@using Nop.Web.Framework.UI;

@{
    var download = downloadService.GetDownloadById(Model ?? 0);
}

<div class="col-12">
    <div class="card">
        <div class="card-header">
            <h4 class="card-title"><strong>View Document</strong></h4><hr />
        </div>

        <div class="card-content">
            <div class="card-body">
                <canvas id="the-canvas" style="width:100%"></canvas>
                <br /><hr />
                <div class="float-left">
                    <button class="btn btn-light btn-min-width mr-1 mb-1 waves-effect waves-light" id="prev">Previous</button>
                </div>
                <div class="float-right">
                    <button class="btn btn-light btn-min-width mr-1 mb-1 waves-effect waves-light" id="next">Next</button>
                </div>
                <div align="center">
                    <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
                </div>
            </div>
        </div>
    </div>
</div>


<link rel="Stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.3.200/pdf_viewer.css" />

<!-- Using CDN to speed up the loading, may consider switch to server lib-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.3.200/pdf.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.3.200/pdf_viewer.js"></script>
<script type="text/javascript">
        pdfjsLib.GlobalWorkerOptions.workerSrc = "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.3.200/pdf.worker.min.js";

        var pdfDoc = null,
            pageNum = 1,
            pageRendering = false,
            pageNumPending = null,
            scale = 3.0,
            canvas = document.getElementById('the-canvas'),
            ctx = canvas.getContext('2d');

        function renderPage(num) {
          pageRendering = true;
          // Using promise to fetch the page
          pdfDoc.getPage(num).then(function(page) {
            var viewport = page.getViewport({scale: scale});
            canvas.height = viewport.height;
              canvas.width = viewport.width;

            // Render PDF page into canvas context
            var renderContext = {
              canvasContext: ctx,
              viewport: viewport
            };
            var renderTask = page.render(renderContext);

            // Wait for rendering to finish
            renderTask.promise.then(function() {
              pageRendering = false;
              if (pageNumPending !== null) {
                // New page rendering is pending
                renderPage(pageNumPending);
                pageNumPending = null;
              }
            });
          });

          // Update page counters
          document.getElementById('page_num').textContent = num;
        }

        function queueRenderPage(num) {
          if (pageRendering) {
            pageNumPending = num;
          } else {
            renderPage(num);
          }
        }

        /**
         * Displays previous page.
         */
        function onPrevPage(e) {
          e.preventDefault();
          if (pageNum <= 1) {
            return;
          }
          pageNum--;
          queueRenderPage(pageNum);
        }
        document.getElementById('prev').addEventListener('click', onPrevPage);

        /**
         * Displays next page.
         */
        function onNextPage(e) {
          e.preventDefault();
          if (pageNum >= pdfDoc.numPages) {
            return;
          }
          pageNum++;
          queueRenderPage(pageNum);
        }
        document.getElementById('next').addEventListener('click', onNextPage);


        //$(document).ready(function () {
            var documentId = "@download.DownloadGuid";

            if (documentId != 0) {
                //var urlDocument = '/Document/Viewer?documentId=' + documentId + '&handler=DocumentContent';
                var urlDocument = "/api/pro/Document?downloadGuid=" + '@download.DownloadGuid';
                pdfjsLib.getDocument(urlDocument).promise.then(function(pdfDoc_) {
                    pdfDoc = pdfDoc_;
                    document.getElementById('page_count').textContent = pdfDoc.numPages;

                  // Initial/first page rendering
                  renderPage(pageNum);
                });
            }
        //});

</script>

