@model DisputeSearchModel
@{
    //page title
    ViewBag.PageTitle = "Dispute";
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Dispute");
}

@{
    const string hideSearchBlockAttributeName = "ReturnRequestsPage.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<div class="content-header clearfix">
    <h1 class="pull-left">
        Dispute
    </h1>
    <div class="pull-right">
        &nbsp;
        @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.ReturnRequestListButtons })
    </div>
</div>

<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                <div class="panel-body">
                    <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                        <div class="search-text">@T("Admin.Common.Search")</div>
                        <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                        <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                    </div>
                    <div class="search-body @(hideSearchBlock ? "closed" : "")">

                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="StartDate" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="StartDate" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="OrderId" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="OrderId" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="EndDate" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="EndDate" />
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-returnrequests" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <p>
                        Here you can find all submitted disputes.
                    </p>
                    @await Html.PartialAsync("Table", new DataTablesModel
               {
                   Name = "dispute-grid",
                   UrlRead = new DataUrl("List", "Dispute", null),
                   SearchButtonId = "search-returnrequests",
                   Length = Model.PageSize,
                   PrimaryKeyColumn = nameof(DisputeModel.Id),
                   LengthMenu = Model.AvailablePageSizes,
                   Filters = new List<FilterParameter>
                       {
                           new FilterParameter(nameof(Model.StartDate), typeof(DateTime?)),
                           new FilterParameter(nameof(Model.EndDate), typeof(DateTime?)),
                           new FilterParameter(nameof(Model.OrderId))
                       },
                   ColumnCollection = new List<ColumnProperty>
                       {
                           new ColumnProperty(nameof(DisputeModel.Id))
                           {
                               Title = "Id",
                               Width = "50"
                           },
                           new ColumnProperty(nameof(DisputeModel.CreatedOnUtc))
                           {
                               Title = "Last Created On",
                               Width = "350",
                               Render = new RenderDate()
                           },
                           new ColumnProperty(nameof(DisputeModel.VendorId))
                           {
                               Title = "Vendor",
                               Width = "350",
                               Render = new RenderCustom("renderColumnVendorInfo")
                           },
                           new ColumnProperty(nameof(DisputeModel.DisputeActionStr))
                           {
                               Title = "Dispute Action",
                               Width = "200"
                           },
                           new ColumnProperty(nameof(ReturnRequestModel.CustomOrderNumber))
                           {
                               Title = T("Admin.ReturnRequests.Fields.CustomOrderNumber").Text,
                               ClassName =  NopColumnClassDefaults.Button,
                               Width = "200",
                               Render = new RenderCustom("renderColumnOrderInfo")
                           },
                           new ColumnProperty(nameof(DisputeModel.Id))
                           {
                               Title = T("Admin.Common.Edit").Text,
                               Width = "100",
                               ClassName =  NopColumnClassDefaults.Button,
                               Render = new RenderButtonEdit(new DataUrl("EditDispute"))
                           }
                   }
               })
                </div>
                <script>
                        function renderColumnOrderInfo(data, type, row, meta) {
                            if (row.OrderId > 0) {
                                var textRenderer = $.fn.dataTable.render.text().display;
                                return '<a class="btn btn-default" href="@Url.Content("~/Admin/Order/Edit/")' + row.OrderId + '"><i class="fa fa-eye"></i> Order</a>';
                            } else {
                                return 'order item is deleted';
                            }
                        }

                        function renderColumnVendorInfo(data, type, row, meta) {
                            var textRenderer = $.fn.dataTable.render.text().display;
                            return '<a href="@Url.Content("~/Admin/Vendor/Edit/")' + row.VendorId + '">' + textRenderer(row.VendorName) + '</a>';
                        }

                </script>
            </div>
        </div>
    </div>
</div>
