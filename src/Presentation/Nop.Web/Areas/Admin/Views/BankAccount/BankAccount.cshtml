@model BankAccountSearchModel

@{
    //page title
    ViewBag.PageTitle = T("Admin.Customers.BankAccount").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Bank Accounts");
}

@{
    const string hideSearchBlockAttributeName = "NewsContentPage.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<div class="content-header clearfix">
    <h1 class="pull-left">
        Bank Accounts
    </h1>
</div>

<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            @*hide the entire search block if no elements are displayed*@
            <div class="panel panel-default panel-search">
                <div class="panel-body">
                    <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                        <div class="search-text">@T("Admin.Common.Search")</div>
                        <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                        <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                    </div>

                    <div class="search-body @(hideSearchBlock ? "closed" : "")">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <label>Account Holder Name</label>
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="AccountHolderName" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-2 col-md-offset-10">
                                <button type="button" id="search-bankaccount" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-body">
                    @await Html.PartialAsync("Table", new DataTablesModel
               {
                   Name = "bankaccount-grid",
                   UrlRead = new DataUrl("List", "BankAccount", null),
                   SearchButtonId = "search-bankaccount",
                   Length = Model.PageSize,
                   LengthMenu = Model.AvailablePageSizes,
                   Filters = new List<FilterParameter>
                        {
                            new FilterParameter(nameof(Model.AccountHolderName)),
                            new FilterParameter(nameof(Model.IsVerified))
                        },
                   ColumnCollection = new List<ColumnProperty>
                        {
                            new ColumnProperty(nameof(BankAccountModel.AccountHolderName))
                            {
                                Title = T("Admin.Customers.BankAccount.Fields.AccountHolderName").Text
                            },
                            new ColumnProperty(nameof(BankAccountModel.BankName))
                            {
                                Title = T("Admin.Customers.BankAccount.Fields.BankName").Text,
                            },
                            new ColumnProperty(nameof(BankAccountModel.AccountNumber))
                            {
                                Title = T("Admin.Customers.BankAccount.Fields.AccountNumber").Text,
                            },
                            //new ColumnProperty(nameof(BankAccountModel.IdentityTypeName))
                            //{
                            //    Title = T("Admin.Customers.BankAccount.Fields.IdentityTypeName").Text,
                            //},
                            //new ColumnProperty(nameof(BankAccountModel.Identity))
                            //{
                            //    Title = T("Admin.Customers.BankAccount.Fields.Identity").Text,
                            //},
                            new ColumnProperty(nameof(BankAccountModel.Status))
                            {
                                Title = T("Admin.Customers.BankAccount.Fields.Status").Text,
                            },
                            new ColumnProperty(nameof(BankAccountModel.CreatedOnUTC))
                            {
                                Title = T("Admin.Customers.BankAccount.Fields.CreatedDate").Text,
                                Width = "200",
                                Render = new RenderDate()
                            },
                            new ColumnProperty(nameof(BankAccountModel.Id))
                            {
                                Title = T("Admin.Common.Edit").Text,
                                Width = "100",
                                ClassName =  NopColumnClassDefaults.Button,
                                Render = new RenderButtonEdit(new DataUrl("BankAccountEdit"))
                            }
                        }
               })

                    <script>
                        function renderColumnComments(data, type, row, meta) {
                            var link = "NewsComments?filterByNewsItemId=" + data;
                            var title = '@T("Admin.ContentManagement.News.NewsItems.Fields.Comments")';
                            var countComments = row.ApprovedComments + row.NotApprovedComments;
                            return '<a class="btn btn-default" href="' + link + '">' + title + ' - ' + countComments + ' (' + row.NotApprovedComments + ')' + '</a>';
                        }
                    </script>
                </div>
            </div>
        </div>
    </div>
</div>